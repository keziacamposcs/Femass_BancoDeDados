/*1) Implemente uma trigger para debitar a quantidade em estoque dos produtos
vendidos.*/
CREATE OR REPLACE TRIGGER trg_atualiza_estoque
AFTER INSERT ON ITEM_VENDA
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
BEGIN
 UPDATE PRODUTO
SET QUANT_ATUAL = QUANT_ATUAL - :NEW.QUANT
 WHERE CODPRO = :NEW.CODPRO;
END;
/*2) Implemente uma trigger para gravar as operações (inserções, atualizações e exclusões)
realizadas na tabela Produto na tabela LOG_OPERACAO.*/
CREATE OR REPLACE TRIGGER TRG_GRAVA_LOG
AFTER INSERT OR DELETE OR UPDATE ON PRODUTO
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
BEGIN
 IF INSERTING THEN
INSERT INTO LOG_OPERACAO
VALUES (SQ_LOG.NEXT,’I’,NULL,:NEW.CODPRO||’-‘||:NEW.NOM_PRO||’-‘||
:NEW.COD_UNIDADE||’-‘||:NEW.LOCALIZACAO||’-‘||:NEW.QUANT_ATUAL||’-‘||
:NEW.PRECO_COMPRA||’-‘||:NEW.PRECO_VENDA||’-‘||:NEW.INATIVO,SYSDATE,USER);
 ELSIF UPDATING THEN
INSERT INTO LOG_OPERACAO
VALUES (SQ_LOG.NEXT,’A’,:OLD.CODPRO||’-‘||:OLD.NOM_PRO||’-‘||
:OLD.COD_UNIDADE||’-‘||:OLD.LOCALIZACAO||’-‘||:OLD.QUANT_ATUAL||’-‘||
:OLD.PRECO_COMPRA||’-‘||:OLD.PRECO_VENDA||’-‘||:OLD.INATIVO,:NEW.CODPRO||
’-‘||:NEW.NOM_PRO||’-‘||:NEW.COD_UNIDADE||’-‘||:NEW.LOCALIZACAO||’-‘||
:NEW.QUANT_ATUAL||’-‘|| :NEW.PRECO_COMPRA||’-‘||:NEW.PRECO_VENDA||’-
‘||:NEW.INATIVO,SYSDATE,USER);
 ELSIF DELETING THEN
INSERT INTO LOG_OPERACAO
VALUES (SQ_LOG.NEXT,’E’,:OLD.CODPRO||’-‘||:OLD.NOM_PRO||’-‘||
:OLD.COD_UNIDADE||’-‘||:OLD.LOCALIZACAO||’-‘||:OLD.QUANT_ATUAL||’-‘||
:OLD.PRECO_COMPRA||’-‘||:OLD.PRECO_VENDA||’-‘||:OLD.INATIVO,NULL,SYSDATE,
USER);
 END IF;
END;
LOG_OPERACAO
COD_SEQ: NUMBER NOT NULL
TIPO_OPERACAO: VARCHAR2(20) NOT NULL
VALORES_ANTIGOS: VARCHAR2(500) NULL
VALORES_NOVOS: VARCHAR2(500) NOT NULL
DATA: DATE NOT NULL
USUARIO: VARCHAR2(10) NOT NULL
PRODUTO
CODPRO: VARCHAR2(13) NOT NULL
NOM_PROD: VARCHAR2(50) NOT NULL
COD_UNIDADE: CHAR(2) NOT NULL (FK)
LOCALIZACAO: VARCHAR2(15) NULL
QUANT_ATUAL: INTEGER NOT NULL
PRECO_COMPRA: NUMBER(10,2) NULL
PRECO_VENDA: NUMBER(10,2) NOT NULL
INATIVO: CHAR(1) NOT NULL
ITEM_VENDA
NR: NUMBER NOT NULL (FK)
CODPRO: VARCHAR2(13) NOT NULL (FK)
QUANT: INTEGER NOT NULL
PRECO_UNIT: NUMBER(10,2) NOT NULL
VALOR_TOT: NUMBER(10,2) NOT NULL
VENDA
NR: NUMBER NOT NULL
DATA: DATE NOT NULL
COD_VEND: NUMBER(2) NOT NULL (FK)
CPF: NUMBER(11) NOT NULL (FK)
COD_FORMA: NUMBER(1) NOT NULL (FK)
COD_END_ENTREGA: NUMBER NULL (FK)
VALOR_TOTAL: NUMBER(15,2) NOT NULL


/*3) Implemente uma trigger que, na deleção de um departamento, seja capaz de deletar
todos os funcionários do referido departamento.*/
CREATE OR REPLACE TRIGGER trg_exclui_funcionarios
BEFORE DELETE ON DEPARTAMENTO
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
BEGIN
 DELETE FROM FUNCIONARIO
 WHERE SIGLA_DEPARTAMENTO = :OLD.SIGLA_DEPARTAMENTO;
END;

/*4) Crie uma trigger para excluir os respectivos dependentes automaticamente quando
um funcionário for excluído.*/
CREATE OR REPLACE TRIGGER trg_exclui_dependentes
BEFORE DELETE ON FUNCIONARIO
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
BEGIN
 DELETE FROM DEPENDENTE
 WHERE MATRICULA_FUNC = :OLD.MATRICULA_FUNC;
END;
/*5) Implementar uma Trigger para não permitir que o salário seja alterado para um valor
abaixo do salário mínimo.*/
CREATE OR REPLACE TRIGGER trg_salario_aud
AFTER UPDATE ON CARGO
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
BEGIN
 IF :NEW.SALARIO < 1045 THEN
 :NEW.SALARIO := 1045;
 END IF;
END;
/*6) Implementar uma Trigger para emitir uma mensagem ao usuário da aplicação que ele
está alocando um projeto a um funcionário sem departamento responsável.*/
CREATE OR REPLACE TRIGGER TGR_VERIFICA_DEPTO_RESP
BEFORE INSERT ON ALOCACAO_FUNC_PROJETO
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DECLARE
 V_CONT NUMBER:=0;
BEGIN
 SELECT COUNT(*) INTO V_CONT
 FROM PROJETO
 WHERE CODIGO_PROJETO = :NEW.CODIGO_PROJETO
 AND SIGLA_DEPARTAMENTO_RESP IS NULL;
 IF V_CONT > 0 THEN
 RAISE_APPLICATION_ERROR(-20001,'O Projeto que você está tentando alocar
para o Funcionário não possui Departamento Responsável.');
 END IF;
END;

/*7) Implementar uma Trigger que, ao inserir um funcionário e seu(s) dependente(s),
checar se algum dependente possui idade maior que 18 anos. Caso tenha, emitir a
seguinte mensagem: “Não é possível inserir um dependente maior de 18 anos”.*/
CREATE OR REPLACE TRIGGER TGR_VERIFICA_IDADE
BEFORE INSERT OR UPDATE ON DEPENDENTE
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
WHEN (FLOOR(MONTHS_BETWEEN(SYSDATE,NEW.DATA_NASCIMENTO)/12) > 18)
BEGIN
RAISE_APPLICATION_ERROR(-20001,'Não é permitido inserir dependentes maiores
de 18 anos!');
END;